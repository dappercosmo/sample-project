name: CI/CD to GCP

on:
  push:
    branches:
      - dev  # Trigger the workflow on push to the dev branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container

      # Step 3: Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: ~/.docker/cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Step 4: Set up GCP credentials
      - name: Set up GCP credentials
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Step 5: Authenticate Docker to GCR
      - name: Authenticate Docker to GCR
        run: gcloud auth configure-docker gcr.io

      # Step 6: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-spring-boot-app:${{ github.sha }} .

      - name: Push Docker image to GCR
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-spring-boot-app:${{ github.sha }}

      # Step 8: Deploy to Google Kubernetes Engine (GKE)
      - name: Deploy to GKE
        run: |
          gcloud container clusters get-credentials my-cluster --zone us-central1-a --project ${{ secrets.GCP_PROJECT_ID }}
          kubectl set image deployment/my-spring-boot-app my-spring-boot-app=gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-spring-boot-app:${{ github.sha }}
